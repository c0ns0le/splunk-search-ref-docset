= Functions for eval and where =
These are functions that you can use with the <code>[[Documentation:Splunk:SearchReference:Eval|eval]]</code> and <code> [[Documentation:Splunk:SearchReference:Where|where]]</code> commands and as part of eval expressions.

{| cellpadding="5" cellspacing="0" border="1" width="100%"
!Function
!Description
!Example(s)
|-
| <code>abs(X)</code>
| This function takes a number X and returns its absolute value.
| This example returns the absnum, whose values are the absolute values of the numeric field <code>number</code>: 

<code>... &#124; eval absnum=abs(number)</code>
|-
| <code>case(X,"Y",...)</code>
| This function takes pairs of arguments X and Y. X arguments are Boolean expressions that, when evaluated to TRUE, return the corresponding Y argument. The function defaults to NULL if none are true.
| This example returns descriptions for the corresponding http status code: 

<code>... &#124; eval description=<nowiki>case(error &#61;&#61; 404, "Not found", error &#61;&#61; 500,
"Internal Server Error", error &#61;&#61; 200, "OK")</nowiki></code>
|-
| <code>ceil(X), ceiling(X)</code>
| This function returns the ceiling of a number X. 
| This example returns n=2:

<code>... &#124; eval n=ceil(1.9)</code>
|-
| <code>cidrmatch("X",Y)</code> 
| This function identifies IP addresses that belong to a particular subnet. The function uses two arguments: the first is the CIDR subnet, which is contained in quotes; the second is the IP address to match, which may be values in a field. 
| This example returns a field, <code>addy</code>, whose values are the IP addresses in the field <code>ip</code> that match the subnet:

<code>... &#124; eval isLocal=if(cidrmatch("123.132.32.0/25",ip),true,false)</code>
|-
| <code>coalesce(X,...)</code>
| This function takes an arbitrary number of arguments and returns the first value that is not null.
| Let's say you have a set of events where the IP address is extracted to either <code>clientip</code> or <code>ipaddress</code>. This example defines a new field called <code>ip</code>, that takes the value of either <code>clientip</code> or <code>ipaddress</code>, depending on which is not NULL (exists in that event): 

<code>... &#124; eval ip=coalesce(clientip,ipaddress)</code>
|-
| <code>commands(X)</code>
| This function takes a search string, or field that contains a search string, X and returns a multivalued field containing a list of the commands used in X. (This is generally not recommended for use except for analysis of audit.log events.)
| <code>... &#124; eval x=commands("search foo  &#124; stats count  &#124; sort count")</code> 

returns a multivalue field x, that contains 'search', 'stats', and 'sort'.
|-
| <code>exact(X)</code> 
| This function evaluates an expression X using double precision floating point arithmetic.  
| <code>... &#124; eval n=exact(3.14 * num)</code>
|-
| <code>exp(X)</code>
| This function takes a number X and returns e<sup>X</sup>.
| This example returns y=e<sup>3</sup>: 

<code>... &#124; eval y=exp(3)</code>
|- 
| <code>floor(X)</code>
| This function returns the floor of a number X.
| This example returns 1: 

<code>... &#124; eval n=floor(1.9)</code>
|-
| <code>if(X,Y,Z)</code> 
| This function takes three arguments. The first argument X is a Boolean expression. If X evaluates to TRUE, the result is the second argument Y. Optionally, if X evaluates to FALSE, the result evaluates to the third argument Z.
| This example looks at the values of error and returns err=OK if error=200, otherwise returns err=Error:

<code>... &#124; eval err=if(error &#61;&#61; 200, "OK", "Error")</code>
|-
| <code>isbool(X)</code>
| This function takes one argument X and returns TRUE if X is Boolean.
| <code>... &#124; eval n=if(isbool(field),"yes","no")</code>

or

<code>... &#124; where isbool(field)</code>
|-
| <code>isint(X)</code>
| This function takes one argument X and returns TRUE if X is an integer.
| <code>... &#124; eval n=isint(field)</code>

or

<code>... &#124; where isint(field)</code>
|-
| <code>isnotnull(X)</code> 
| This function takes one argument X and returns TRUE if X is not NULL. This is a useful check for whether or not a field (X) contains a value.
| <code>... &#124; eval n=if(isnotnull(field),"yes","no")</code>

or

<code>... &#124;  where isnotnull(field)</code>
|-
| <code>isnull(X)</code> 
| This function takes one argument X and returns TRUE if X is NULL. 
| <code>... &#124; eval n=if(isnull(field),"yes","no")</code>

or

<code>... &#124; where isnull(field)</code>
|-
| <code>isnum(X)</code>
| This function takes one argument X and returns TRUE if X is a number. 
| <code>... &#124; eval n=if(isnum(field),"yes","no")</code>

or

<code>... &#124; where isnum(field)</code>
|-
| <code>isstr()</code>
| This function takes one argument X and returns TRUE if X is a string. 
| <code>... &#124; eval n=if(isstr(field),"yes","no")</code>

or

<code>... &#124; where isstr(field)</code>
|-
| <code>len(X)</code>
| This function returns the character length of a string X.
| <code>... &#124; eval n=len(field)</code>
|-
| <code>like(X,"Y")</code>
| This function takes two arguments, a field X and a quoted string Y, and returns TRUE if and only if the first argument is like the SQLite pattern in Y. 
| This example returns islike=TRUE if the field value starts with foo:

<code>... &#124; eval islike=like(field, "foo%")</code>

or

<code>... &#124; where like(field, "foo%")</code>
|-
| <code>ln(X)</code>
| This function takes a number X and returns its natural log. 
| This example returns the natural log of the values of bytes:

<code>... &#124; eval lnBytes=ln(bytes)</code>
|-
| <code>log(X,Y)</code>
| This function takes either one or two numeric arguments and returns the log of the first argument X using the second argument Y as the base. If the second argument Y is omitted, this function evaluates the log of number X with base 10.
| <code>... &#124; eval num=log(number,2)</code>
|-
| <code>lower(X)</code>
| This function takes one string argument and returns the lowercase version. The upper() function also exists for returning the uppercase version.
| This example returns the value provided by the field username in lowercase.

<code>... &#124; eval username=lower(username)</code>
|-
| <code>ltrim(X,Y)</code>
| This function takes one or two string arguments X and Y and returns X with the characters in Y trimmed from the left side. If Y is not specified, spaces and tabs are trimmed.
| This example returns x="abcZZ":

<code>... &#124; eval x=ltrim("   ZZZZabcZZ ", " Z")</code> 
|-
| <code>match(X,Y)</code> 
| This function compares the regex string Y to the value of X and returns a Boolean value; it returns T (true) if X matches the pattern defined by Y.
| This example returns true IF AND ONLY IF field matches the basic pattern of an IP address. Note that the example uses ^ and $ to perform a full match.

<code>... &#124; eval n=if(match(field, "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"), 1, 0)</code>
|-
| <code>max(X,...)</code>
| This function takes an arbitrary number of arguments X, that is numbers or strings, and returns the max; strings are greater than numbers.
| This example returns either "foo" or field, depending on the value of field:

<code>... &#124; eval n=max(1, 3, 6, 7, "foo", field)</code>
|-
| <code>md5(X)</code> 
| This function computes and returns the MD5 hash of a string value X. 
| <code>... &#124; eval n=md5(field)</code>
|-
| <code>min(X,...)</code>
| This function takes an arbitrary number of arguments X, that is numbers or strings, and returns the min; strings are greater than numbers.
| This example returns 1:

<code>... &#124; eval n=min(1, 3, 6, 7, "foo", field)</code>
|-
| <code>mvappend(X,"Y",Z)</code>
| This function takes three arguments, fields X and Z and a quoted string Y, and returns a multivalued result. The value of Y and the values of the field Z are appended to the values of field X. The fields X and Z can be either multi or single valued fields. 
| <code>... &#124; eval fullName=mvappend(lastName,", ",firstName)</code>
|-
| <code>mvcount(X)</code>
| This function takes an field X and returns the number of values of that field if the field is multivalued, 1 if the field is single valued, and NULL otherwise.
| <code>... &#124; eval n=mvcount(multifield)</code>
|-
| <code>mvfilter(X)</code> 
| This function filters a multi-valued field based on an arbitrary Boolean expression X. The Boolean expression X can reference ONLY ONE field at a time. 

'''Note:'''This function will return NULL values of the field <code>x</code> as well. If you don't want the NULL values, use the expression: <code>mvfilter(x!=NULL)</code>.
| This example returns all values of the field email that end in .net or .org:

<code>... &#124; eval n=mvfilter(match(email, "\.net$") OR match(email, "\.org$"))</code>
|-
| <code>mvfind(X,"Y")</code>
| Appears in 4.2.2. This function tries to find a value in multivalued field X that matches the regular expression Y. If a match exists, the index of the first matching value is returned (beginning with zero). If no values match, NULL is returned.
| <code>... &#124; eval n=mvfind(mymvfield, "err\d+")</code>
|-
| <code>mvindex(X,Y,Z)</code>
| This function takes two or three arguments, field X and numbers Y and Z, and returns a subset of the multivalued field using the indexes provided.

For <code>mvindex(mvfield, startindex, [endindex])</code>, endindex is inclusive and optional; both startindex and endindex can be negative, where -1 is the last element. If endindex is not specified, it returns just the value at startindex. If the indexes are out of range or invalid, the result is NULL. 
| Since indexes start at zero, this example returns the third value in "multifield", if it exists:

<code>... &#124; eval n=mvindex(multifield, 2)</code>
|-
| <code>mvjoin(X,Y)</code>
| This function takes two arguments, multi-valued field X and string delimiter Y, and joins the individual values of X using Y.  
| This example joins together the individual values of "foo" using a semicolon as the delimiter:

<code>... &#124; eval n=mvjoin(foo, ";")</code>
|-
| <code>mvrange(X,Y,Z)</code>
| This function creates a multivalue field for a range of numbers. It takes up to three arguments: a starting number X, an ending number Y (exclusive), and an optional step increment Z. If the increment is a timespan (such as '7'd), the starting and ending numvers are treated as epoch times.
| This example returns a multivalue field with the values 1, 3, 5, 7, 9.

<code>... &#124; eval mv=mvrange(1,11,2)</code>
|-
| <code>mvzip(X,Y)</code>
| This function takes two multivalue fields, X and Y, and combines them by stitching together the first value of X with the first value of field Y, then the second with the second, etc.  Similar to Python's zip command.
| <code>... &#124; eval n=server=mvzip(hosts,ports)</code>
|-
| <code>now()</code>
| This function takes no arguments and returns the time that the search was started. The time is represented in Unix time or seconds since epoch.
| 
|-
| <code>null()</code> 
| This function takes no arguments and returns NULL. The evaluation engine uses NULL to represent "no value"; setting a field to NULL clears its value.
| 
|-
| <code>nullif(X,Y)</code> 
| This function takes two arguments, fields X and Y, and returns the X if the arguments are different. It returns NULL, otherwise.
| <code>... &#124; eval n=nullif(fieldA,fieldB)</code>
|-
| <code>pi()</code>
| This function takes no arguments and returns the constant pi to 11 digits of precision.
| <code>... &#124; eval area_circle=pi()*pow(radius,2)</code>
|-
| <code>pow(X,Y)</code>
| This function takes two numeric arguments X and Y and returns X<sup>Y</sup>.
| <code>... &#124; eval area_circle=pi()*pow(radius,2)</code>
|-
|<code>random()</code>
| This function takes no arguments and returns a pseudo-random number ranging from zero to 2<sup>31</sup>-1, for example: 0&hellip;2147483647
|
|-
| <code>relative_time(X,Y)</code>
| This function takes an epochtime time, X, as the first argument and a relative time specifier, Y, as the second argument and returns the epochtime value of Y applied to X.
| <code>... &#124; eval n=relative_time(now(), "-1d@d")</code>
|-
| <code>replace(X,Y,Z)</code> 
| This function returns a string formed by substituting string Z for every occurrence of regex string Y in string X. The third argument Z can also reference groups that are matched in the regex. 
| This example returns date with the month and day numbers switched, so if the input was 1/12/2009 the return value would be 12/1/2009:

<code>... &#124; eval n=replace(date, "^(\d{1,2})/(\d{1,2})/", "\2/\1/")</code>
|-
| <code>round(X,Y)</code>
| This function takes one or two numeric arguments X and Y, returning X rounded to the amount of decimal places specified by Y. The default is to round to an integer.
| This example returns n=4:

<code>... &#124; eval n=round(3.5)</code>

This example returns n=2.56:

<code>... &#124; eval n=round(2.555, 2)</code>
|-
| <code>rtrim(X,Y)</code>
| This function takes one or two string arguments X and Y and returns X with the characters in Y trimmed from the right side. If Y is not specified, spaces and tabs are trimmed.
| This example returns n="ZZZZabc":

<code>... &#124; eval n=rtrim("   ZZZZabcZZ ", " Z")</code>
|-
| <code>searchmatch(X)</code>
| This function takes one argument X, which is a search string. The function returns true IF AND ONLY IF the event matches the search string.
| <code>... &#124; eval n=searchmatch("foo AND bar")</code>
|-
| <code>sigfig(X)</code>
| This function takes one argument X, a number, and rounds that number to the appropriate number of significant figures.
| <code>1.00*1111 = 1111</code>, but 

<code>... &#124; eval n=sigfig(1.00*1111)</code>

returns n=1110.
|-
|<code>spath(X,Y)</code>
| This function takes two arguments: an input source field X and an spath expression Y, that is the XML or JSON formatted location path to the value that you want to extract from X. If Y is a literal string, it needs quotes, <code>spath(X,"Y")</code>. If Y is a field name (with values that are the location paths), it doesn't need quotes. This may result in a multivalued field. Read more about the <code>[[Documentation:Splunk:SearchReference:Spath|spath]]</code> search command.
| This example returns the values of locDesc elements: 
<code>... &#124; eval locDesc=spath(_raw, "vendorProductSet.product.desc.locDesc")</code>

This example returns the hashtags from a twitter event:
<code>index=twitter | eval output=spath(_raw, "entities.hashtags")</code>
|-
|<code>split(X,"Y")</code>
| This function takes two arguments, field X and delimiting character Y. It splits the value(s) of X on the delimiter Y and returns X as a multi-valued field.
| <code>... &#124; eval n=split(foo, ";")</code>
|-
| <code>sqrt(X)</code>
| This function takes one numeric argument X and returns its square root.
| This example returns 3:

<code>... &#124; eval n=sqrt(9)</code>
|-
| <code>strftime(X,Y)</code>
| This function takes an epochtime value, X, as the first argument and renders it as a string using the format specified by Y.  For a list and descriptions of format options, refer to the topic [[Documentation:Splunk:SearchReference:Commontimeformatvariables|"Common time format variables"]].
| This example returns the hour and minute from the _time field:

<code>... &#124; eval n=strftime(_time, "%H:%M")</code>
|-
| <code>strptime(X,Y)</code>
| This function takes a time represented by a string, X, and parses it into a timestamp using the format specified by Y.  For a list and descriptions of format options, refer to the topic [[Documentation:Splunk:SearchReference:Commontimeformatvariables|"Common time format variables"]].
| If timeStr is in the form, "11:59", this returns it as a timestamp:

<code>... &#124; eval n=strptime(timeStr, "%H:%M")</code>
|-
| <code>substr(X,Y,Z)</code>
| This function takes either two or three arguments, where X is a string and Y and Z are numeric. It returns a substring of X, starting at the index specified by Y with the number of characters specified by Z. If Z is not given, it returns the rest of the string. 

The indexes follow SQLite semantics; they start at 1. Negative indexes can be used to indicate a start from the end of the string.
| This example concatenates "str" and "ing" together, returning "string":

<code>... &#124; eval n=substr("string", 1, 3) + substr("string", -3)</code>
|-
| <code>time()</code>
| This function returns the wall-clock time with microsecond resolution. The value of time() will be different for each event based on when that event was processed by the <code>eval</code> command.
|
|-
| <code>tonumber("X",Y)</code>
| This function converts the input string X to a number, where Y is optional and used to define the base of the number to convert to. Y can be 2..36, and defaults to 10. If it cannot parse the input to a number, the function returns NULL.
| This example returns "164":

<code>... &#124; eval n=tonumber("0A4",16)</code>
|-
| <code>tostring(X,Y)</code> 
| This function converts the input value to a string. If the input value is a number, it reformats it as a string. If the input value is a Boolean value, it returns the corresponding string value, "True" or "False".

This function requires at least one argument X; if X is a number, the second argument Y is optional and can be <code>"hex"</code> <code>"commas"</code> or <code>"duration"</code>:
* <code>tostring(X,"hex")</code> converts X to hexadecimal.
* <code>tostring(X,"commas")</code> formats X with commas and, if the number includes decimals, rounds to nearest two decimal places.
* <code>tostring(X,"duration")</code> converts seconds X to readable time format HH:MM:SS.
| This example returns "True 0xF 12,345.68":
<code>... &#124; eval n=tostring(1&#61;&#61;1) + " " + tostring(15, "hex") + " " 
+ tostring(12345.6789, "commas")</code>

This example returns <code>foo=615 and foo2=00:10:15</code>:
<code>... | eval foo=615 | eval foo2 = tostring(foo, "duration")</code>
|-
| <code>trim(X,Y)</code>
| This function takes one or two string arguments X and Y and returns X with the characters in Y trimmed from both sides. If Y is not specified, spaces and tabs are trimmed.
| This example returns "abc":

<code>... &#124; eval n=trim("   ZZZZabcZZ ", " Z")</code>
|-
| <code>typeof(X)</code>
| This function takes one argument and returns a string representation of its type.
| This example returns "NumberStringBoolInvalid":

<code>... &#124; eval n=typeof(12) + typeof("string") + typeof(1&#61;&#61;2) + typeof(badfield)</code>
|-
| <code>upper(X)</code>
| This function takes one string argument and returns the uppercase version. The lower() function also exists for returning the lowercase version.
| This example returns the value provided by the field username in uppercase.

<code>... &#124; eval n=upper(username)</code>
|-
| <code>urldecode(X)</code>
| This function takes one URL string argument X and returns the unescaped or decoded URL string. 
| This example returns "<nowiki>http://www.splunk.com/download?r=header</nowiki>":

<code>... &#124; eval n=urldecode("http%3A%2F%2Fwww.splunk.com%2Fdownload%3Fr%3Dheader")</code>
|-
| <code>validate(X,Y,...)</code>
| This function takes pairs of arguments, Boolean expressions X and strings Y. The function returns the string Y corresponding to the first expression X that evaluates to False and defaults to NULL if all are True. 
| This example runs a simple check for valid ports:
<code>... &#124; eval n=validate(isint(port), "ERROR: Port is not an integer", 
port >= 1 AND port <= 65535, "ERROR: Port is out of range")</code>
|}


[[Category:V:Splunk:5.0beta]][[Category:V:Splunk:5.0]][[Category:V:Splunk:6.0beta]][[Category:V:Splunk:6.0]][[Category:V:Splunk:5.0.1]][[Category:V:Splunk:5.0.2]][[Category:V:Splunk:5.0.3]][[Category:V:Splunk:5.0.4]][[Category:V:Splunk:5.0.5]][[Category:V:Splunk:6.0.1]]
